# -*- coding: utf-8 -*-
"""module0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/109DoXN_JW7UgoCWTA5KLNaUoEpFXi5eG
"""

import random

min_number = 1
max_number = 100


# don't use this function directly, use 'guess' instead
def guess_internal(left, right, secret):
    # divide result should be always treated as int 
    predict = left + int((right - left) / 2)

    # print (left, right, "###", predict, secret)

    if secret > predict:
        if predict == left:
            # this is border situation, when max_number was thought and we'll never
            # predict this number due to rounding (in out situation recursion will stuck on 99)

            # got it!
            return 1

        return guess_internal(predict, right, secret) + 1
    elif secret < predict:
        return guess_internal(left, predict, secret) + 1
    else:
        # got it!
        return 1


# main function for number predicting
def guess(secret):
    if secret < min_number or secret > max_number or min_number >= max_number:
        return -1

    return guess_internal(min_number, max_number, secret)


# test function
def calc_average_attempts():
    check = min_number
    tests = 0
    attempts = 0

    while check <= max_number:
        attempts += guess(check)

        tests += 1
        check += 1

    print ("Average attempts to guess: " + str(float(attempts) / float(tests)))


def guess_single_random_number():
    number = random.randint(1, 100)
    print ("This program guessed " + str(number) + " in " + str(guess(number)) + " attempts")


# print average attempts after running 100 tests
calc_average_attempts()

# run single test
guess_single_random_number()